/*
 * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 *
 * ======= Advantech crop. am3352 custom board ========
*/

/dts-v1/;

#include "am33xx.dtsi"
#include <dt-bindings/pwm/pwm.h>
#include <dt-bindings/interrupt-controller/irq.h>

/ {
	model = "TI AM3352 Advantech custom board";
	compatible = "ti,am335x-evmsk", "ti,am33xx";
	
	cpus {
		cpu@0 { 
			cpu-idle-disabled; /* force cpu idle disable */
		};
	};

	memory {
		device_type = "memory";
		reg = <0x80000000 0x10000000>; /* 256 MB */
	};
	
	lis3_reg: fixedregulator@1 {
		compatible = "regulator-fixed";
		regulator-name = "lis3_reg";
		regulator-boot-on;
	};

	/**
	 * The exar uart node define:
	 * use 16550A driver
	*/
	exar_uart0: exar_uart0@9000000 {
		device_type = "serial";
		compatible = "exar,16m890";
		/*
		 * use GPMC cs1 base memory(0x9000000)
		 * size 0x07 (only 3 bit)
		*/
		reg = <0x09000000 0x07>;
		clock-frequency = <29491200>;
		interrupt-parent = <&intc>;
		/*
		 * reference by  ti-am335x TRM:
		 * 6.3 ARM cortex-A8 interrupt table
		*/
		interrupts = <123>; /* A15 */
		/* 
		 * self implement:
		 * 232/422/485 mode select
		*/
		mode-sel-gpio = <&gpio0 27 GPIO_ACTIVE_HIGH>; /* U12 */
		status = "okay"; 
	};
	
	exar_uart1: exar_uart1@9000008 {
		device_type = "serial";
		compatible = "exar,16m890";
		/*
		 * use GPMC cs1 base memory(0x9000008)
		 * size 0x07 (only 3 bit)
		*/
		reg = <0x09000008 0x07>;
		clock-frequency = <29491200>;
		fifo-size = <128>;
		interrupt-parent = <&intc>;
		/*
		 * reference by  ti-am335x TRM:
		 * 6.3 ARM cortex-A8 interrupt table
		*/
		interrupts = <124>; /* A14 */
		/* 
		 * self implement:
		 * 232/422/485 mode select
		*/
		mode-sel-gpio = <&gpio0 26 GPIO_ACTIVE_HIGH>; /* U11 */
		status = "okay"; 
	};

	exar_uart2: exar_uart2@a000000 {
		device_type = "serial";	
		compatible = "exar,16m890";
		/*
		 * use GPMC cs2 base memory(0xa000000)
		 * size 0x07 (only 3 bit)
		*/
		reg = <0x0a000000 0x07>;
		clock-frequency = <29491200>;
		fifo-size = <128>;
		/*
		 * Pin V14 cannot be a external interrupt,
		 * so use GPIO mode as interrupt
		 * reference by TRM 25.3.3
		*/
		interrupt-parent = <&gpio1>;
		interrupts = <17 IRQ_TYPE_LEVEL_HIGH>; /* V14 */
		/* 
		 * self implement:
		 * 232/422/485 mode select
		*/
		mode-sel-gpio = <&gpio0 23 GPIO_ACTIVE_HIGH>; /* T10 */
		status = "okay"; 
	};

	exar_uart3: exar_uart3@a000008 {
		device_type = "serial";	
		compatible = "exar,16m890";
		/*
		 * use GPMC cs2 base memory(0xa000008)
		 * size 0x07 (only 3 bit)
		*/
		reg = <0x0a000008 0x07>;
		clock-frequency = <29491200>;
		fifo-size = <128>;
		/*
		 * Pin U14 cannot be a external interrupt,
		 * so use GPIO mode as interrupt
		 * reference by TRM 25.3.3
		*/
		interrupt-parent = <&gpio1>;
		interrupts = <18 IRQ_TYPE_LEVEL_HIGH>; /* U14 */
		/* 
		 * self implement:
		 * 232/422/485 mode select
		*/
		mode-sel-gpio = <&gpio0 22 GPIO_ACTIVE_HIGH>; /* U10 */
		status = "okay"; 
	};
};

&am33xx_pinmux {
	pinctrl-names = "default";
	pinctrl-0 = <&gpmc_pins>;
	
	cpsw_default: cpsw_default {
		pinctrl-single,pins = <
			/* Slave 1 */
			0x10c ( PIN_INPUT_PULLDOWN | MUX_MODE1 )	/* (H17) gmii1_crs.rmii1_crs_dv */
			0x110 ( PIN_INPUT_PULLUP | MUX_MODE1 )		/* (J15) gmii1_rxer.rmii1_rxer */
			0x114 ( PIN_OUTPUT_PULLDOWN | MUX_MODE1 ) 	/* (J16) gmii1_txen.rmii1_txen */
			0x124 ( PIN_OUTPUT_PULLDOWN | MUX_MODE1 ) 	/* (K16) gmii1_txd1.rmii1_txd1 */
			0x128 ( PIN_OUTPUT_PULLDOWN | MUX_MODE1 ) 	/* (K17) gmii1_txd0.rmii1_txd0 */
			0x13c ( PIN_INPUT_PULLUP | MUX_MODE1 )		/* (L15) gmii1_rxd1.rmii1_rxd1 */
			0x140 ( PIN_INPUT_PULLUP | MUX_MODE1 ) 		/* (M16) gmii1_rxd0.rmii1_rxd0 */
			0x144 ( PIN_INPUT_PULLDOWN | MUX_MODE0 ) 	/* (H18) rmii1_refclk.rmii1_refclk */
			/* Slave 2 */
			0x40 ( PIN_OUTPUT_PULLDOWN | MUX_MODE3 ) 	/* (R13) gpmc_a0.rmii2_txen */
			0x50 ( PIN_OUTPUT_PULLDOWN | MUX_MODE3 ) 	/* (R14) gpmc_a4.rmii2_txd1 */
			0x54 ( PIN_OUTPUT_PULLDOWN | MUX_MODE3 ) 	/* (V15) gpmc_a5.rmii2_txd0 */
			0x68 ( PIN_INPUT_PULLUP | MUX_MODE3 ) 		/* (T16) gpmc_a10.rmii2_rxd1 */
			0x6c ( PIN_INPUT_PULLUP | MUX_MODE3 ) 		/* (V17) gpmc_a11.rmii2_rxd0 */
			0x74 ( PIN_INPUT_PULLUP | MUX_MODE3 ) 		/* (U17) gpmc_wpn.rmii2_rxer */
			0x88 ( PIN_INPUT_PULLDOWN | MUX_MODE2 ) 	/* (T13) gpmc_csn3.rmii2_crs_dv */
			0x108 ( PIN_INPUT_PULLDOWN | MUX_MODE1 ) 	/* (H16) gmii1_col.rmii2_refclk */
		>;
	};

	davinci_mdio_default: davinci_mdio_default {
		pinctrl-single,pins = <
			0x14c (PIN_OUTPUT_PULLUP | MUX_MODE0)				/* (M18) mdio_clk.mdio_clk */
			0x148 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0)/* (M17) mdio_data.mdio_data */
		>;
	};
	
	mmc1_pins_default: pinmux_mmc1_pins {
		pinctrl-single,pins = <
			0x0F0 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat3.mmc0_dat3 */
			0x0F4 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat2.mmc0_dat2 */
			0x0F8 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat1.mmc0_dat1 */
			0x0FC (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat0.mmc0_dat0 */
			0x100 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_clk.mmc0_clk */
			0x104 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_cmd.mmc0_cmd */
			0x1A0 (PIN_INPUT_PULLUP | MUX_MODE7)	/* mcasp0_aclkr.gpio3_18 */
			0x160 (PIN_INPUT | MUX_MODE7)			/* spi0_cs1.gpio0_6 */
		>;
	};
	/* The console */
	uart0_pins: pinmux_uart0_pins {
		pinctrl-single,pins = <
			0x170 (PIN_INPUT_PULLUP | MUX_MODE0)	/* (E15) uart0_rxd0 */
			0x174 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* (E16) uart0_txd0 */ 
		>;
	};
	
	gpmc_pins: pinmux_gpmc_pins {
		pinctrl-single,pins = <
			/* The nand flash pins */
			0x0 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad0.gpmc_ad0 */
			0x4 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad1.gpmc_ad1 */
			0x8 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad2.gpmc_ad2 */
			0xc (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad3.gpmc_ad3 */
			0x10 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad4.gpmc_ad4 */
			0x14 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad5.gpmc_ad5 */
			0x18 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad6.gpmc_ad6 */
			0x1c (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad7.gpmc_ad7 */
			0x70 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_wait0.gpmc_wait0 */
			0x7c (PIN_OUTPUT | MUX_MODE0)		/* gpmc_csn0.gpmc_csn0  */
			0x90 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_advn_ale.gpmc_advn_ale */
			0x94 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_oen_ren.gpmc_oen_ren */
			0x98 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_wen.gpmc_wen */
			0x9c (PIN_OUTPUT | MUX_MODE0)		/* gpmc_be0n_cle.gpmc_be0n_cle */
			/* The exar uart0 & uart1 pins */
			0x80 (PIN_OUTPUT | MUX_MODE0)		/* (U9) gpmc_csn1.gpmc_csn1 */
			0x1b0 (PIN_INPUT | MUX_MODE0)		/* (A15) xdma_event_intr0, INT0 */
			0x1b4 (PIN_INPUT | MUX_MODE0)		/* (D14) xdma_event_intr1, INT1 */
			0x2c (PIN_OUTPUT | MUX_MODE7)		/* (U12) gpio0[27], LD_SEL0 */
			0x28 (PIN_OUTPUT | MUX_MODE7)		/* (T11) gpio0[26], LD_SEL1 */
			0xa0 (PIN_OUTPUT | MUX_MODE1)		/* (R1) gpmca0, SMI_Addr0 */
			0xa4 (PIN_OUTPUT | MUX_MODE1)		/* (R2) gpmca1, SMI_Addr1 */
			/* The exar uart2 & uart3 pins */
			0x84 (PIN_OUTPUT | MUX_MODE0)		/* (V9) gpmc_csn2.gpmc_csn2 */
			0x44 (PIN_INPUT | MUX_MODE7)		/* (V14) gpio1[17], INT2 */
			0x48 (PIN_INPUT | MUX_MODE7)		/* (U14) gpio1[18], INT3 */
			0x24 (PIN_OUTPUT | MUX_MODE7)		/* (T10) gpio0[23], LD_SEL2 */
			0x20 (PIN_OUTPUT | MUX_MODE7)		/* (U10) gpio0[22], LD_SEL3 */
			0xa8 (PIN_OUTPUT | MUX_MODE1)		/* (R3) gpmca2, SMI_Addr2 */
			0xac (PIN_OUTPUT | MUX_MODE1)		/* (R4) gpmca3, SMI_Addr3 */
		>;
	};
};


&elm{
	status = "okay";
};

&gpmc {
	status = "okay";
	pinctrl-names = "default";
	ranges = <0 0 0x08000000 0x01000000>,/* CS0: 16MB for NAND */
			<1 0 0x09000000 0x01000000>, /* CS1: 16MB for exar uart controller 1 */
			<2 0 0x0a000000 0x01000000>; /* CS2: 16MB for exar uart controller 2 */
	nand@0,0 {
		compatible = "ti,omap2-nand";
		reg = <0 0 4>; /* CS0, offset 0, IO size 4 */
		interrupt-parent = <&intc>;
		interrupts = <0 IRQ_TYPE_NONE>, /* fifoevent */
					<1 IRQ_TYPE_NONE>; /* termcount */
		ready-gpio = <&gpmc 0 GPIO_ACTIVE_HIGH>; /* gpmc_wait0 */
		ti,nand-ecc-opt = "bch8";
		ti,elm-id = <&elm>;
		nand-bus-width = <8>;
		gpmc,device-nand = "true";
		gpmc,device-width = <1>;
		gpmc,sync-clk-ps = <0>;
		gpmc,cs-on-ns = <0>;
		gpmc,cs-rd-off-ns = <44>;
		gpmc,cs-wr-off-ns = <44>;
		gpmc,adv-on-ns = <6>;
		gpmc,adv-rd-off-ns = <34>;
		gpmc,adv-wr-off-ns = <44>;
		gpmc,we-on-ns = <0>;
		gpmc,we-off-ns = <40>;
		gpmc,oe-on-ns = <0>;
		gpmc,oe-off-ns = <54>;
		gpmc,access-ns = <64>;
		gpmc,rd-cycle-ns = <82>;
		gpmc,wr-cycle-ns = <82>;
		gpmc,bus-turnaround-ns = <0>;
		gpmc,cycle2cycle-delay-ns = <0>;
		gpmc,clk-activation-ns = <0>;
		gpmc,wr-access-ns = <40>;
		gpmc,wr-data-mux-bus-ns = <0>;
		/*
		 * MTD partition table 
		 *
		 * All SPL-* partitions are sized to minimal length
		 * which can be independently programmable. For
		 * NAND flash this is equal to size of erase-block 
		*/
		#address-cells = <1>;
		#size-cells = <1>;
		partition@0 {
			label = "NAND.SPL";
			reg = <0x00000000 0x000020000>; /* 128k */
		};
		partition@1 {
			label = "NAND.dtb";
			reg = <0x00020000 0x00020000>; /* 128k */
		};
		partition@2 {
			label = "NAND.u-boot";
			reg = <0x00040000 0x00100000>; /* 1m */
		};
		partition@3 {
			label = "NAND.u-boot-env";
			reg = <0x00140000 0x00020000>; /* 128k */
		};
		partition@4 {
			label = "NAND.kernel1";
			reg = <0x00160000 0x00400000>; /* 4m */
		};
		partition@5 {
			label = "NAND.file-system1";
			reg = <0x00560000 0x01000000>; /* 16m */
		};
		partition@6 {
			label = "NAND.kernel2";
			reg = <0x01560000 0x00400000>; /* 4m */
		};
		partition@7 {
			label = "NAND.file-system2";
			reg = <0x01960000 0x01000000>; /* 16m */
		};
	};
	
	exar_controller0@1,0 {
		reg = <1 0 0x01000000>;
		#address-cells = <1>;
		#size-cells = <1>;		/* allow CS address passing */
		gpmc,device-width = <1>;/* 8-bit data width */
		bank-width = <1>;

		gpmc,mux-add-data;		
		gpmc,cs-on-ns = <0>; 		
		gpmc,cs-rd-off-ns = <186>; 
		gpmc,cs-wr-off-ns = <186>; 
		
		gpmc,rd-cycle-ns = <186>;
		gpmc,wr-cycle-ns = <186>;
		gpmc,access-ns = <114>;

		gpmc,cycle2cycle-delay-ns = <18>;
		gpmc,wr-data-mux-bus-ns = <90>;
		gpmc,wr-access-ns = <186>;
		gpmc,cycle2cycle-samecsen;
		gpmc,cycle2cycle-diffcsen;

		gpmc,we-off-ns = <200>;
		gpmc,we-on-ns = <20>;
		gpmc,oe-off-ns = <140>;
		gpmc,oe-on-ns = <20>;
    };
	
	exar_controller1@2,0 {
		reg = <2 0 0x01000000>;
		#address-cells = <1>;
		#size-cells = <1>;
		gpmc,device-width = <1>;
		bank-width = <1>;
		
		gpmc,mux-add-data;		
		gpmc,cs-on-ns = <0>; 		
		gpmc,cs-rd-off-ns = <186>; 
		gpmc,cs-wr-off-ns = <186>; 
		
		gpmc,rd-cycle-ns = <186>;
		gpmc,wr-cycle-ns = <186>;
		gpmc,access-ns = <114>;

		gpmc,cycle2cycle-delay-ns = <18>;
		gpmc,wr-data-mux-bus-ns = <90>;
		gpmc,wr-access-ns = <186>;
		gpmc,cycle2cycle-samecsen;
		gpmc,cycle2cycle-diffcsen;

		gpmc,we-off-ns = <200>;
		gpmc,we-on-ns = <20>;
		gpmc,oe-off-ns = <140>;
		gpmc,oe-on-ns = <20>;
    };
};

&mac {
	pinctrl-names = "default";
	pinctrl-0 = <&cpsw_default>;
	dual_emac = <1>;
	status = "okay";
};

&davinci_mdio {
	pinctrl-names = "default";
	pinctrl-0 = <&davinci_mdio_default>;
	status = "okay";
};

&cpsw_emac0 {
	phy_id = <&davinci_mdio>, <1>;
	phy-mode = "rmii";
	dual_emac_res_vlan = <1>;
};

&cpsw_emac1 {
	phy_id = <&davinci_mdio>, <3>;
	phy-mode = "rmii";
	dual_emac_res_vlan = <2>;
};

&phy_sel {
	rmii-clock-ext;
};      

&mmc1 {
	status = "okay";
	bus-width = <4>;
	pinctrl-names = "default";
	pinctrl-0 = <&mmc1_pins_default>;
	cd-gpios = <&gpio0 6 GPIO_ACTIVE_HIGH>;
};

/* crypto engine */
&sham {
	status = "okay";
};

/* crypto engine */
&aes {
	status = "okay";
};

&gpio0 {
	ti,no-reset-on-init;
	ti,no-idle;
};

&gpio1 {
	ti,no-reset-on-init;
	ti,no-idle;
};

&gpio2 {
	ti,no-reset-on-init;
	ti,no-idle;
};

&rtc {
	clocks = <&clk_32768_ck>, <&clkdiv32k_ick>;
	clock-names = "ext-clk", "int-clk";
};

/* The console */
&uart0 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins>;
	status = "okay";
};
